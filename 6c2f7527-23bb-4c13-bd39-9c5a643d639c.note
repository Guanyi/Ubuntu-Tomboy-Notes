<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Git Basic</title>
  <text xml:space="preserve"><note-content version="0.1">Git Basic

<bold><size:large>Local Part:</size:large></bold>

1, Install git application
<bold>sudo apt-get install git</bold>

2, Go to the project folder's parent folder, 
for example Tomboy Notes default notes location is <bold><link:url>~/.local/share/tomboy</link:url></bold>
<bold>cd <link:url>~/.local/share</link:url></bold>

3, Run
<bold>git config --global user.name "guanyi"
git config --global user.email "<link:url>guanyifang@hotmail.com"</link:url></bold>
git will keep these user information in version control.

4, Run git command to initializa the repository
git init &lt;projectName&gt;, which is the existing subfolder "tomboy".
<bold>git init tomboy</bold>
It will create a new folder named ".git" under the current <bold><link:url>~/.local/share/tomboy</link:url></bold> folder. All git backups and info are in this .git folder.

5, Run <bold>cd tomboy,</bold> it shows the folder is the branch master.

6, Run <bold>git status</bold> to see files which have not been tracked. The unstaged files are in red color.

7, Run <bold>git add .</bold> to add all possible unstaged files,
or <bold>git add &lt;fileName&gt;</bold> to add a specific file by its name.
or <bold>git add -u</bold> to track all exsiting staged files change, not new files which have not yet been add to the stage.
or <bold>git add -A</bold> for doing both.

8, Run <bold>git status</bold> again, all staged files are in green color.

9, Run <bold>git commit -m "&lt;message&gt;"</bold> to commit all staged files to repository with a message to indicate the purpose of this commit. All commited files will be in white color.

10, Run <bold>git log</bold> to see the commit history with log that user entered.
or run <bold>git log --oneline</bold> to get the short version.

11, After editing something in the project files. run
<bold>git diff</bold>
It will show the difference between current file snap shot (red) and the newest change (green). If the change is very long, git will put it in a command version editor. To get out of the editor, use <bold>SHIFT+zz</bold>.

Note:
There are three stages in this whole process.
<list><list-item dir="ltr">a, newest version (just modified the file)
</list-item><list-item dir="ltr">b, added version (just run git add &lt;fileName&gt;, but not commit yet)
</list-item><list-item dir="ltr">c, commited version (after run git commit -m)</list-item></list>

<bold>git diff --cached</bold> is to compare "added version" and "commited version"
<bold>git diff </bold>is to compare "newest version" and "added version"
<bold>git diff HEAD</bold> is to compare "newest version" and "commited version"

12 To add and commit in one step, run <bold>git commit -a -m "&lt;message&gt;"</bold>


<bold><size:large>Remote Part:</size:large></bold>

1, Create a repositoty in github.com

2, On client computer, run <bold>git remote add origin &lt;remote repo url&gt;</bold>

3, Run <bold>git remote -v</bold> to verify the remote url

4, Run <bold>git clone &lt;remote repo url&gt; &lt;local folder name&gt;</bold>
Note: &lt;local folder name&gt; cannot omitted. If so, the local folder name will use the remote repository name from GitHub.

5, Run <bold>git push origin master</bold> to upload local commited files to GitHub

6, From another computer, run <bold>git pull origin master</bold> to get update

</note-content></text>
  <last-change-date>2015-01-19T04:13:09.7150930-08:00</last-change-date>
  <last-metadata-change-date>2015-01-19T04:13:09.7150930-08:00</last-metadata-change-date>
  <create-date>2015-01-19T00:38:29.3475940-08:00</create-date>
  <cursor-position>2655</cursor-position>
  <selection-bound-position>2655</selection-bound-position>
  <width>701</width>
  <height>463</height>
  <x>607</x>
  <y>261</y>
  <tags>
    <tag>system:notebook:GitHub</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>